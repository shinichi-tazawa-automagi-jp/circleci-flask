version: 2.1

##########
# Common
#########
orbs:
  aws-code-deploy: circleci/aws-code-deploy@2.0.0
  aws-ecr: circleci/aws-ecr@6.15
  aws-ecs: circleci/aws-ecs@2.0.0
  aws-cli: circleci/aws-cli@2.0
  terraform: circleci/terraform@2.1.0

##################
# Job Definitions
##################
jobs:
  build-ami:
    docker:
      - image: hashicorp/packer:latest
    working_directory: ~/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build
          command: |
            packer init aws-linux.pkr.hcl
            packer build aws-linux.pkr.hcl
          no_output_timeout: 30m
  build:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: 19.03.13
#          docker_layer_caching: true
      - run:
          name: Build
          command: |
            pwd
            ls
            sudo pip install requirements.txt
            python manage.py
          no_output_timeout: 30m
  test:
    docker:
      - image: circleci/python:3.8
        environment:
          FLASK_CONFIG: testing
          TEST_DATABASE_URL: postgresql://ubuntu@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ''
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
#          docker_layer_caching: true
      - run: mkdir test-reports
      - run:
          name: Start Selenium
          command: |
            sudo pip install --upgrade pip
            sudo pip install selenium
      - restore_cache:
          key: deps2-{{ checksum "requirements/dev.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
      - save_cache:
          key: deps2-{{ checksum "requirements/dev.txt" }}
          paths:
            - 'venv'
      - run:
          command: |
            . venv/bin/activate
            python manage.py test
      - store_artifacts:
          path: test-reports/
          destination: tr1
      - store_test_results:
          path: test-reports/

  ec2-deploy:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/circleci-docs
    steps:
      - run:
          name: awscli のインストール
          command: sudo pip install awscli
      - run:
          name: S3 へのデプロイ
          command: aws s3 sync jekyll/_site/docs s3://circle-production-static-site/docs/ --delete

  ecs-deploy:
    docker:
      - image: 'cimg/python:3.9.1'
    steps:
      - setup_remote_docker:
            version: 19.03.13
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_DEFAULT_REGION
          repo: 'circleci'
          tag: '${CIRCLE_SHA1}'
#          context: context
          create-repo: true
#          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: ./
          profile-name: default
          skip-when-tags-exist: false
#      - aws-ecs/deploy-service-update:
#          cluster-name: '${APP_PREFIX}-cluster'
#          container-image-name-updates: 'container=${APP_PREFIX}-service,tag=${CIRCLE_SHA1}'
#          family: '${APP_PREFIX}-service'
#          requires:
#            - aws-ecr/build-and-push-image
      - aws-ecs/run-task:
          awsvpc: true
          cluster: circleci-cluster
          launch-type: EC2
          task-definition: circleci-task


############
# Workflows
############

workflows:
  version: 2
  build:
    jobs:
#      - build:
#          context: context

      - test:
          context: context
#          requires:
#            - build
  deploy:
    jobs:
      - hold:
          type: approval # UI 上に手動承認ボタンを表示させる
      - ecs-deploy:
          requires:
            - hold
#          filters:
#            branches:
#              only: master


#  deploy_application:
#    jobs:
#      - aws-code-deploy/deploy:
#          application-name: myApplication
#          bundle-bucket: myApplicationS3Bucket
#          bundle-key: myS3BucketKey
#          deployment-group: myDeploymentGroup
#          service-role-arn: myDeploymentGroupRoleARN